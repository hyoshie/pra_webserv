!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AcceptTCPConeection	AcceptTCPConeection.cpp	/^int AcceptTCPConeection(int servSock) {$/;"	f
BLUE	color.hpp	/^#define BLUE /;"	d
COLOR_HPP	color.hpp	/^#define COLOR_HPP$/;"	d
CYAN	color.hpp	/^#define CYAN /;"	d
CreateTCPServerSocket	CreateTCPSocket.cpp	/^int CreateTCPServerSocket(unsigned short port) {$/;"	f
DieWithError	DieWithError.cpp	/^void DieWithError(const char *errorMessage) {$/;"	f
GREEN	color.hpp	/^#define GREEN /;"	d
IWATCHER_HPP	IWatcher.hpp	/^#define IWATCHER_HPP$/;"	d
IWatcher	IWatcher.hpp	/^class IWatcher {$/;"	c
InitSelectInfo	TCPEchoServer-Select.cpp	/^void InitSelectInfo(selectInfo *selInfo, int servSock, vector<int> &clntSocks) {$/;"	f
MAGENTA	color.hpp	/^#define MAGENTA /;"	d
MAXPENDING	CreateTCPSocket.cpp	/^#define MAXPENDING /;"	d	file:
MAX_CLIENTS	TCPEchoServer-Select.cpp	/^#define MAX_CLIENTS /;"	d	file:
RCVBUFSIZE	RepeatClientMessage.cpp	/^#define RCVBUFSIZE /;"	d	file:
RCVBUFSIZE	TCPEchoClient.cpp	/^#define RCVBUFSIZE /;"	d	file:
RED	color.hpp	/^#define RED /;"	d
RESET	color.hpp	/^#define RESET /;"	d
RepeatClientMessage	RepeatClientMessage.cpp	/^int RepeatClientMessage(int clntSock) {$/;"	f
SELECTOR_HPP	Selector.hpp	/^#define SELECTOR_HPP$/;"	d
SERVER_HPP	Server.hpp	/^#define SERVER_HPP$/;"	d
Selector	Selector.cpp	/^Selector::Selector(std::set<int> readfds) {$/;"	f	class:Selector
Selector	Selector.hpp	/^class Selector {$/;"	c
Server	Server.cpp	/^Server::Server() {$/;"	f	class:Server
Server	Server.hpp	/^class Server {$/;"	c
TCPECHOSERVER_H	TCPEchoServer.h	/^#define TCPECHOSERVER_H$/;"	d
YELLOW	color.hpp	/^#define YELLOW /;"	d
accept	Server.cpp	/^int Server::accept() {$/;"	f	class:Server
addReadFd	Selector.cpp	/^void Selector::addReadFd(int fd) {$/;"	f	class:Selector
addWriteFd	Selector.cpp	/^void Selector::addWriteFd(int fd) {$/;"	f	class:Selector
close	Server.cpp	/^int Server::close(int fd) {$/;"	f	class:Server
connected_fd_	Server.hpp	/^  std::set<int> connected_fd_;$/;"	m	class:Server
evnet_cnt_	Selector.hpp	/^  int evnet_cnt_;$/;"	m	class:Selector
getAllSocketFd	Server.cpp	/^std::set<int> Server::getAllSocketFd() const {$/;"	f	class:Server
getConnectedFd	Server.cpp	/^std::set<int> Server::getConnectedFd() const { return connected_fd_; }$/;"	f	class:Server
getEventCount	Selector.cpp	/^int Selector::getEventCount() const { return evnet_cnt_; }$/;"	f	class:Selector
getListenFd	Server.cpp	/^int Server::getListenFd() const { return listen_fd_; }$/;"	f	class:Server
getReadyReadFds	Selector.cpp	/^std::set<int> Selector::getReadyReadFds() const { return ready_readfds_; }$/;"	f	class:Selector
getReadyWriteFds	Selector.cpp	/^std::set<int> Selector::getReadyWriteFds() const { return ready_writefds_; }$/;"	f	class:Selector
init	Selector.cpp	/^void Selector::init(std::set<int> readfds) {$/;"	f	class:Selector
kMaxPendig	Server.hpp	/^  const int kMaxPendig = 5;$/;"	m	class:Server
kRecvBufferSize	Server.hpp	/^  const int kRecvBufferSize = 32;$/;"	m	class:Server
kServerPort	Server.hpp	/^  const int kServerPort = 5000;$/;"	m	class:Server
kTimeoutSec	Selector.hpp	/^  static const int kTimeoutSec = 5;$/;"	m	class:Selector
listen_fd_	Server.hpp	/^  int listen_fd_;$/;"	m	class:Server
main	TCPEchoClient.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	TCPEchoServer-Select.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	main.cpp	/^int main() {$/;"	f
max_fd_	Selector.hpp	/^  int max_fd_;$/;"	m	class:Selector
max_readfd_	Selector.hpp	/^  int max_readfd_;$/;"	m	class:Selector
max_writefd_	Selector.hpp	/^  int max_writefd_;$/;"	m	class:Selector
maxfd	TCPEchoServer-Select.cpp	/^  int maxfd;$/;"	m	struct:__anon1	file:
monitor	Selector.cpp	/^int Selector::monitor() {$/;"	f	class:Selector
printSetInfo	Selector.cpp	/^void printSetInfo(std::set<int> fds) {$/;"	f
readfds	TCPEchoServer-Select.cpp	/^  fd_set readfds;$/;"	m	struct:__anon1	file:
ready_readfds_	Selector.hpp	/^  std::set<int> ready_readfds_;$/;"	m	class:Selector
ready_writefds_	Selector.hpp	/^  std::set<int> ready_writefds_;$/;"	m	class:Selector
recvClientMessage	Server.cpp	/^int Server::recvClientMessage(int readable_fd) {$/;"	f	class:Server
removeReadFd	Selector.cpp	/^void Selector::removeReadFd(int fd) {$/;"	f	class:Selector
removeWriteFd	Selector.cpp	/^void Selector::removeWriteFd(int fd) {$/;"	f	class:Selector
repeatClientMessage	Server.cpp	/^int Server::repeatClientMessage(int readable_fd) {$/;"	f	class:Server
selectInfo	TCPEchoServer-Select.cpp	/^} selectInfo;$/;"	t	typeref:struct:__anon1	file:
sendMessage	Server.cpp	/^int Server::sendMessage(int writable_fd) {$/;"	f	class:Server
showDebugInfo	Selector.cpp	/^void Selector::showDebugInfo() const {$/;"	f	class:Selector
target_readfds_	Selector.hpp	/^  std::set<int> target_readfds_;$/;"	m	class:Selector
target_writefds_	Selector.hpp	/^  std::set<int> target_writefds_;$/;"	m	class:Selector
timeout	TCPEchoServer-Select.cpp	/^  struct timeval timeout;$/;"	m	struct:__anon1	typeref:struct:__anon1::timeval	file:
timeout_	Selector.hpp	/^  struct timeval timeout_;$/;"	m	class:Selector	typeref:struct:Selector::timeval
toFdset	Selector.cpp	/^fd_set Selector::toFdset(std::set<int> cont_fds) {$/;"	f	class:Selector
toSet	Selector.cpp	/^std::set<int> Selector::toSet(fd_set fds, std::set<int> cont_fds) {$/;"	f	class:Selector
~Selector	Selector.cpp	/^Selector::~Selector() {}$/;"	f	class:Selector
~Server	Server.cpp	/^Server::~Server() {$/;"	f	class:Server
